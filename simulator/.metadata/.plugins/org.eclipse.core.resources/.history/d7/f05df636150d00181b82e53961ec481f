//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see http://www.gnu.org/licenses/.
// 

#include "Node.h"

Define_Module(Node);

void Node::activity()
{
    for(;;)
    {
        waitAndDeletePackets(SimTime(100,SIMTIME_S));
    }
}

void Node::receive(simtime_t timeout, bool strictTimeout) {
    auto now = simTime();
    auto waitDelta = timeout - now;
    cMessage timeoutMsg(timeoutPktName, KIND_TIMEOUT);
    scheduleAt(timeout, timeoutMsg);
    cQueue interferringMsgs, collidingMsgs;
    cMessage *msg = receive(waitDelta);
    if(msg == nullptr || (msg->isSelfMessage() && msg->getName() == timeoutPktName && msg->getKind == KIND_TIMEOUT))
        return; //no message received
    if (SimTime((strictTimeout? 0 : msg->getBitLength() * 4) + preambleSfdTimeUs, SIMTIME_US) + msg->getSendingTime())
    waitAndEnqueue(waitDelta, &firstMsg);
    if (firstMsg.isEmpty()) return;
    cMessage msg;
    if(!strictTimeout)
    ((cPacket *)msg)->getBitLength() / datarate

}

void Node::sendAt() {

}
