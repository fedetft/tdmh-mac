/***************************************************************************
 *   Copyright (C)  2018 by Polidori Paolo                                 *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   As a special exception, if other files instantiate templates or use   *
 *   macros or inline functions from this file, or you compile this file   *
 *   and link it with other works to produce a work based on this file,    *
 *   this file does not by itself cause the resulting work to be covered   *
 *   by the GNU General Public License. However the source code for this   *
 *   file must still be made available in accordance with the GNU General  *
 *   Public License. This exception does not invalidate any other reasons  *
 *   why a work based on this file might be covered by the GNU General     *
 *   Public License.                                                       *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, see <http://www.gnu.org/licenses/>   *
 ***************************************************************************/
#include "topology_message.h"
#include <cstring>

namespace miosix {

std::vector<unsigned char> NeighborMessage::getPkt()  {
    std::vector<unsigned char> retval((getMaxSize() - 1) / sizeof(unsigned char) + 1);
    auto pkt = retval.data();
    memset(pkt, 0, sizeof(pkt)/sizeof(unsigned char));
    auto idx = 0;
    unsigned short firstBitPow;
    for (firstBitPow = nodesBits - sizeof(unsigned char); firstBitPow > 0; firstBitPow -= sizeof(unsigned char))
        pkt[idx++] = sender >> firstBitPow;
    pkt[idx] |= sender << -firstBitPow;
    for (firstBitPow = hopBits + firstBitPow; firstBitPow > 0; firstBitPow -= sizeof(unsigned char))
        pkt[idx++] |= hop >> firstBitPow;
    pkt[idx] |= hop << -firstBitPow;
    for (firstBitPow = nodesBits + firstBitPow; firstBitPow > 0; firstBitPow -= sizeof(unsigned char))
        pkt[idx++] |= assignee << firstBitPow;
    pkt[idx++] |= assignee >> -firstBitPow;
    bool *pkt_neighbors = ((bool*) pkt) + (idx * sizeof(unsigned char) + firstBitPow);
    for (unsigned short j = 0; j < numNodes - 1; j++)
        pkt_neighbors[j] = neighbors[j];
    return retval;
}

boost::optional<NeighborMessage> NeighborMessage::fromPkt(unsigned short numNodes, unsigned short nodesBits, unsigned char hopBits,
        unsigned char* pkt, unsigned short bitLen, unsigned char startBit) {
    auto size = NeighborMessage::getMaxSize(numNodes, nodesBits, hopBits);
    if (bitLen < size) return boost::none;
    auto trailingBits = startBit % sizeof(unsigned char);
    auto idx = startBit / sizeof(unsigned char);
    unsigned short ones = ~0;
    unsigned short firstBitPow;
    unsigned short sender = 0;
    for (firstBitPow = nodesBits - sizeof(unsigned char) - trailingBits;
            firstBitPow > 0;
            firstBitPow -= sizeof(unsigned char))
        sender |= pkt[idx++] << firstBitPow;
    sender |= pkt[idx] >> -firstBitPow;
    sender &= ones >> (sizeof(unsigned short) - nodesBits);
    unsigned short hop = 0;
    for (firstBitPow = hopBits - firstBitPow; firstBitPow > 0; firstBitPow -= sizeof(unsigned char))
        hop |= pkt[idx++] << firstBitPow;
    hop |= pkt[idx] >> -firstBitPow;
    hop &= ones >> (sizeof(unsigned short) - hopBits);
    unsigned short assignee = 0;
    for (firstBitPow = nodesBits - firstBitPow; firstBitPow > 0; firstBitPow -= sizeof(unsigned char))
        assignee |= pkt[idx++] << firstBitPow;
    assignee |= pkt[idx++] >> -firstBitPow;
    assignee &= ones >> (sizeof(unsigned short) - nodesBits);
    bool neighbors[numNodes - 1];
    bool *pkt_neighbors = ((bool*) pkt) + (idx * sizeof(unsigned char) + firstBitPow);
    for (unsigned short j = 0; j < numNodes - 1; j++)
        neighbors[j] = pkt_neighbors[j];
    return NeighborMessage(
            numNodes, nodesBits, hopBits, sender, hop, assignee,
            std::vector<bool>(neighbors, neighbors + numNodes - 1));

}

bool NeighborMessage::operator ==(const NeighborMessage &b) const {
    return this->sender == b.sender && this->assignee == b.assignee && this->hop == b.hop && this->neighbors == b.neighbors;
}

} /* namespace miosix */
