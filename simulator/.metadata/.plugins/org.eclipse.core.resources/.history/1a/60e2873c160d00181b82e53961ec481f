//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see http://www.gnu.org/licenses/.
// 

#include "Node.h"

Define_Module(Node);

void Node::activity()
{
    for(;;)
    {
        waitAndDeletePackets(SimTime(100,SIMTIME_S));
    }
}

void Node::receive(simtime_t timeout, bool strictTimeout) {
    auto waitDelta = timeout - simTime();
    cMessage timeoutMsg(timeoutPktName, KIND_TIMEOUT);
    scheduleAt(timeout, timeoutMsg);
    cQueue interferringMsgs, collidingMsgs;
    cMessage *msg = receive(waitDelta);
    if(msg == nullptr || (msg->isSelfMessage() && msg->getName() == timeoutPktName && msg->getKind == KIND_TIMEOUT))
        return; //no message received
    auto msgDataTimeUs =  msg->getBitLength() * 4
    if (SimTime((strictTimeout? 0 : msgDataTimeUs) + preambleSfdTimeUs, SIMTIME_US) + msg->getSendingTime())
        return;//packet received but exceeds the timeout
    //wait for the max confidence time to obtain a constructive interference
    waitAndEnqueue(SimTime(constructiveInterferenceTimeNs, SIMTIME_NS), &interferringMsgs);
    waitAndEnqueue(SimTime(msgDataTimeUs + preambleSfdTimeUs, SIMTIME_US), &collidingMsgs);
    if(!collidingMsgs.isEmpty())
        return; //message collided and arrived corrupted
}

void Node::sendAt() {

}
